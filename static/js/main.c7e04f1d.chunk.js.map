{"version":3,"sources":["hooks/withTracker.js","config.js","components/ScrollToTop/ScrollToTop.js","components/Spinner/index.js","components/App/App.js","serviceWorkerRegistration.js","index.js"],"names":["ReactGA","initialize","withTracker","WrappedComponent","options","trackPage","page","set","pageview","HOC","props","useEffect","location","pathname","withRouter","history","children","unlisten","listen","window","scrollTo","CircularProgressWithLabel","className","Box","position","display","CircularProgress","variant","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","Math","round","value","Spinner","React","useState","progress","setProgress","timer","setInterval","prevProgress","clearInterval","Home","lazy","ProductsPage","BlogArticlePage","App","fallback","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","container","document","getElementById","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c7e04f1d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactGA from \"react-ga\";\nimport { GA_TRACKING_CODE } from '../config';\n\nReactGA.initialize(GA_TRACKING_CODE);\n\nconst withTracker = (WrappedComponent, options = {}) => {\n  const trackPage = page => {\n    ReactGA.set({\n      page,\n      ...options\n    });\n    ReactGA.pageview(page);\n  };\n\n  const HOC = props => {\n    useEffect(() => trackPage(props.location.pathname), [\n      props.location.pathname\n    ]);\n\n    return <WrappedComponent {...props} />;\n  };\n\n  return HOC;\n};\n\nexport default withTracker;","export const GA_TRACKING_CODE = \"UA-183748705-1\";","import React, { useEffect, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction ScrollToTop({ history, children }) {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    }\n  }, [history]);\n\n  return <Fragment>{children}</Fragment>;\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport \"./style.scss\"\n\nfunction CircularProgressWithLabel(props) {\n  return (\n    <div className=\"container-centre-screen\">\n      <Box position=\"relative\" display=\"inline-flex\">\n        <CircularProgress variant=\"determinate\" {...props} />\n        <Box\n          top={0}\n          left={0}\n          bottom={0}\n          right={0}\n          position=\"absolute\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n            props.value,\n          )}%`}</Typography>\n        </Box>\n      </Box>\n    </div>\n  );\n}\n\nCircularProgressWithLabel.propTypes = {\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number.isRequired,\n};\n\nexport default function Spinner() {\n  const [progress, setProgress] = React.useState(10);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    }, 800);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return <CircularProgressWithLabel value={progress} />;\n}","import React, { lazy, Suspense } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\nimport withTracker from \"../../hooks/withTracker\";\nimport ScrollToTop from \"../ScrollToTop/ScrollToTop\";\nimport Spinner from '../Spinner';\n// import BrandPage from '../../pages/BrandPage/BrandPage';\n\nconst Home = lazy(() => import(\"../../pages/Home/Home\"));\nconst ProductsPage = lazy(() => import(\"../../pages/ProductsPage/ProductsPage\"));\nconst BlogArticlePage = lazy(() => import(\"../../pages/BlogArticlePage/BlogArticlePage\"));\n\nconst App = () => (\n  <HashRouter>\n      <ScrollToTop>\n          <Switch>\n            <Suspense fallback={<Spinner />}>\n              <Route exact path=\"/\" component={withTracker(Home)} />\n              <Route exact path=\"/products\" component={withTracker(ProductsPage)} />\n              {/* <Route exact path=\"/brands\" component={BrandPage} /> */}\n              <Route\n                exact\n                path=\"/blog/:url\"\n                component={withTracker(BlogArticlePage)}\n              />\n            </Suspense>\n          </Switch>\n      </ScrollToTop>\n  </HashRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst container = document.getElementById('root')\n\nReactDOM.render(<App />, container)\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}